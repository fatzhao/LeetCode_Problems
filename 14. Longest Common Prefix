//输入空值判断，边界判断，["aa", "a"]漏了一种情况，
class Solution {
    public String longestCommonPrefix(String[] strs) {
        
        StringBuilder pre = new StringBuilder();
        
        if(strs == null || strs.length == 0) return "";
        
        pre.append(strs[0]);
        
        for (int i = 1; i<strs.length; i++){
            for(int j=0; j<pre.length(); j++){
                if (j<strs[i].length() && strs[i].charAt(j) != pre.charAt(j) )
                    pre.delete(j, pre.length());
                else if (j==strs[i].length())
                    pre.delete(j, pre.length());
            }
        }
        
        return pre.toString();
        
    }
}

//method 2 纵向比较，看第一个各个字符串中的字符是否与其他字符串匹配，挨个比较第一个字符串中的字符
class Solution {
    public String longestCommonPrefix(String[] strs){
        if (strs == null || strs.length == 0) return "";
        for (int i=0; i<strs[0].length(); i++){
            char c = strs[0].charAt(i);
            for (int j=1; j<strs.length; j++){
                if(i==strs[j].length() || strs[j].charAt(i)!=c)
                    return strs[0].substring(0,i);
            }
        }
        return strs[0];
    }
}

//method 3 binary search
class Solution {
    public String longestCommonPrefix(String[] strs) {
    if (strs == null || strs.length == 0)
        return "";
    int minLen = Integer.MAX_VALUE;
    for (String str : strs)
        minLen = Math.min(minLen, str.length());
    int low = 1;
    int high = minLen;
    while (low <= high) {
        int middle = (low + high) / 2;
        if (isCommonPrefix(strs, middle))
            low = middle + 1;
        else
            high = middle - 1;
    }
    return strs[0].substring(0, (low + high) / 2);
}

private boolean isCommonPrefix(String[] strs, int len){
    String str1 = strs[0].substring(0,len);
    for (int i = 1; i < strs.length; i++)
        if (!strs[i].startsWith(str1))
            return false;
    return true;
}
}
