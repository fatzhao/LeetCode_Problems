//method 1
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        if(s== null || s.length() == 0)
            return 0;
        
        HashSet<Character> set = new HashSet<Character>();
        
        int walker =0;
        int runner = 0;
        int max = 0;
        
        while(runner < s.length()){
            if(set.contains(s.charAt(runner))){
                if(max<runner-walker)
                    max=runner-walker;
                while(s.charAt(walker) != s.charAt(runner)){
                    set.remove(s.charAt(walker));
                    walker++;
                }
                walker++;
            }
            else{
                set.add(s.charAt(runner));
            }
            runner++;
        }
        max = Math.max(max,runner-walker);
        return max;
        
    }
}

//method 2
class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        Set<Character> set = new HashSet<>();
        
        int ans = 0, i = 0, j = 0;
        
        while (i<s.length() &&j<s.length()){
            if (!set.contains(s.charAt(j))){
                set.add(s.charAt(j++));
                ans = Math.max(ans, j-i);
            }
            else{
                set.remove(s.charAt(i++));
            }
        }
        return ans;
        
    }
}
